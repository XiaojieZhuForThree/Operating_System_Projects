package edu.utdallas.blockingFIFO;

import java.util.List;

import edu.utdallas.taskExecutor.Task;

public class blockingFifoQueue {
	int N;
	Task[] buffer;
	int nextin, nextout;
	int count;
	Object notfull, notempty; // Monitors used for synchronization

	public blockingFifoQueue(int n, Thread addThread, List<Thread> ThreadPool) {
		N = n;
		buffer = new Task[N];
		nextin = 0;
		nextout = 0;
		count = 0;
		notfull = addThread;
		notempty = ThreadPool;
	}

	public void put(Task task) throws Exception {
		if (count == N) {
			synchronized (notfull) {
				notfull.wait();
			}

		}
		synchronized (this) {

			buffer[nextin] = task;
			nextin = (nextin + 1) % N;
			count++;
			notempty.notify();
		}
	}

	public Task take() throws Exception {
		if (count == 0)
			synchronized (notempty) {
				notempty.wait();
			}

		synchronized (this) {
			Task result = buffer[nextout];
			nextout = (nextout + 1) % N;
			count--;
			synchronized (notfull) {
				notfull.notify();
			}
			return result;
		}
	}
}
