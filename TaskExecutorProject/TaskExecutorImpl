package edu.utdallas.taskExecutorImpl;

import java.util.*;

import edu.utdallas.blockingFIFO.blockingFifoQueue;
import edu.utdallas.taskExecutor.Task;
import edu.utdallas.taskExecutor.TaskExecutor;

public class TaskExecutorImpl implements TaskExecutor {
	blockingFifoQueue bfq;
	List<Thread> ThreadPool;
	Task task;
	Thread addThread;
	Runnable running = new Runnable() {
		public void run() {
			while (true) {
				try {
					Task newTask = bfq.take();
					newTask.execute();
				} catch (Exception e) {
					
				}
				Thread.yield();
			}
//			try {
//				while (true) {
//					Task newTask = bfq.take();
//					newTask.execute();
//				}
//			} catch (Exception e) {
//
//			}
		}
	};
	Runnable adding = new Runnable() {
		public void run() {
			try {
				bfq.put(task);
			} catch (Exception e) {

			}
		}
	};

	public TaskExecutorImpl(int n) {
		ThreadPool = new ArrayList<>();
		for (int i = 0; i < 10; i++) {
			ThreadPool.add(new Thread(running));
		}
		addThread = new Thread(adding);
		bfq = new blockingFifoQueue(100, addThread, ThreadPool);
		while (true) {
			try {
				Thread runThread = ThreadPool.remove(0);
				runThread.run();
			} catch (Exception e) {
				
			}
		}
//		try {
//			while (true) {
//				Thread runThread = ThreadPool.remove(0);
//				runThread.start();
//
//			}
//
//		} catch (Exception e) {
//			
//		}
//		Thread.yield();
	}

	public void addTask(Task task) {
		this.task = task;
		addThread.run();		
	}
}
